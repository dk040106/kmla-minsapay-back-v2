#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('minsapay:server');
const http = require('http');
const https = require('https');
const fs = require('fs');

/**
 * Normalize a port into a number, string, or false.
 */
const normalizePort = (val) => {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
};

/**
 * Event listener for server "error" event.
 */
const onError = (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
};

/**
 * Event listener for server "listening" event.
 */

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
};

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT);
app.set('port', port);

// make http or https server, depending on NODE_ENV
let server;

switch (process.env.NODE_ENV) {
  case 'development':
  default:
    server = http.createServer(app);
    break;
  case 'production':
    /**
     * Get credentials for HTTPS server
     */
    const privateKey = fs.readFileSync(
      process.env.SSL_DIR + 'privkey.pem',
      'utf8'
    );
    const certificate = fs.readFileSync(
      process.env.SSL_DIR + 'cert.pem',
      'utf8'
    );
    const chain = fs.readFileSync(process.env.SSL_DIR + 'chain.pem', 'utf8');

    const credentials = {
      key: privateKey,
      cert: certificate,
      ca: chain,
    };

    /**
     * Create HTTPS server.
     */
    server = https.createServer(credentials, app);
    break;
}

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
